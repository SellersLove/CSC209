The concept I'm going to talk about is CString. We already knew what String is and we have worked with String in both Python and Java. But today I'm going to talk about why CString are so differernt with String in Python and Java, also why we have to learn it.
Fisrt let's start with the difference between CString and String in Python and Java. The biggest difference is CString has a NULL Terminates '\0' at the end of a String which both Java String and Python String don't have. For instance, String "CSC" in C is actually length of 4 and it looks like "CSC\0". Therefore, working with CString is much mre dangerous than working with Strings in other languages cause sometimes if we forget the NULL terminates at the end it might ruin everything. However, this dangerous thing leads us to some cool thing that C is dealing with, that is memory.
Memory is real a cool thing in C, and CString has a lot to do with memory. For example, when when you print a String let's say char a[4] = "CSC", and you're trying to print a. And the actual thing you are passing in to printf function is the first memory address of a[0], which is &a[0], and the String you get from printf is the String contained from memory address a[0] to the fisrt NULL terminates it meets.
The concept so far I'm still not comfortable with is memory leak. My understanding of memory leak was forget to free the memory that you allocated before. But after assignment 2 I started doubt myself. Since I got lots of memory leak in the place and I fixed mastery way.
I'm just wondering how excatly to free memory and how it works in C. I know when you allocated a chunk a memory, let's say int *a = (int *) malloc(sizeof(int)), what you did is actually stored the first address of the memory you allocated into a. But when you try to free this chunk of memory, what we did is free(a) and we also just passed in the first address of the memory we allocated, so how dose system know the how big the size of the memory is it should free. 